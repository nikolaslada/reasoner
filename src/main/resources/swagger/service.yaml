---
openapi: 3.0.2
info:
  title: Reasoner
  description: Reasoner is engine for OntoWeb project. It provides Rest API for back-office application and for client queries.
  license:
    name: Â© Nikolas Lada
  version: 0.1.0-oas3
servers:
- url: /
paths:
  /my-ontologies:
    get:
      summary: Get my ontologies
      parameters:
      - name: offset
        in: query
        description: The number of items to skip before starting to collect the result set.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: limit
        in: query
        description: The numbers of items to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: orderBy
        in: query
        description: 'Order by name of attribute connected by : with order type (asc/desc).'
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orderType
        in: query
        description: ASC or DESC. Default is ASC.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyOntologies'
        "204":
          description: No Content
    x-summary: My Ontology list
  /ontologies:
    get:
      summary: Get my ontologies
      parameters:
      - name: offset
        in: query
        description: The number of items to skip before starting to collect the result set.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: limit
        in: query
        description: The numbers of items to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: orderBy
        in: query
        description: 'Order by name of attribute connected by : with order type (asc/desc).'
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orderType
        in: query
        description: ASC or DESC. Default is ASC.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ontologies'
        "204":
          description: No Content
    x-summary: My Ontology list
  /ontology/{ontologyId}:
    get:
      summary: Get ontology detail
      parameters:
      - name: ontologyId
        in: path
        description: Numeric ID of the Ontology.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OntologyDetail'
        "404":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /class-tree/{ontologyId}:
    get:
      summary: Get Class Tree
      parameters:
      - name: ontologyId
        in: path
        description: Numeric ID of the Ontology.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassTree'
        "204":
          description: No Content
        "404":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /class-node:
    post:
      summary: Create a Class Node
      description: Creates a new Class with minimum attributes, which are name and condition object.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewClassNode'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Id'
        "400":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /class-node/{classId}:
    get:
      summary: Get Class Node
      parameters:
      - name: classId
        in: path
        description: Numeric ID of the Class node.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassNode'
        "400":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete the Class Node
      parameters:
      - name: classId
        in: path
        description: Numeric ID of the Class node.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: No Content
        "410":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Partially update the Class Node
      parameters:
      - name: classId
        in: path
        description: Numeric ID of the Class node.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditedClassNode'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "410":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /class-node/{classId}/check-condition:
    put:
      summary: Check of class condition
      parameters:
      - name: classId
        in: path
        description: Numeric ID of the Class node.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Condition'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CheckedCondition'
        "400":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "410":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /property-tree/{ontologyId}:
    get:
      summary: Get Property Tree
      parameters:
      - name: ontologyId
        in: path
        description: Numeric ID of the Ontology.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyTree'
        "204":
          description: No Content
        "404":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /property/{propertyId}:
    get:
      summary: Get object property
      parameters:
      - name: propertyId
        in: path
        description: Numeric ID of the Object Property.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectPropertyResponse'
        "400":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete the Object Property
      parameters:
      - name: propertyId
        in: path
        description: Numeric ID of the Object Property.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: No Content
        "410":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Partially update the Object Property
      parameters:
      - name: propertyId
        in: path
        description: Numeric ID of the Object Property.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectPropertyRequest'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "410":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user:
    post:
      summary: Create a User
      description: Creates a new User.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserRequest'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
        "400":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/{userId}:
    get:
      summary: Get the User Detail
      parameters:
      - name: userId
        in: path
        description: Numeric ID of the User.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
        "400":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete the User
      parameters:
      - name: userId
        in: path
        description: Numeric ID of the User.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: No Content
        "410":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Partially update the User
      parameters:
      - name: userId
        in: path
        description: Numeric ID of the User.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetailResponse'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "410":
          description: HTTP Client Error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      title: Error
      required:
      - code
      - messageList
      - timestamp
      type: object
      properties:
        code:
          type: integer
          format: int32
        timestamp:
          type: string
          format: date-time
        messageList:
          type: array
          description: List of error codes and error messages.
          items:
            $ref: '#/components/schemas/ErrorMessage'
      example:
        code: 400
        timestamp: 2020-01-13T12:00:00.000+0000
        messageList:
        - code: notValidClass
          message: Class is not valid!
    ErrorMessage:
      title: ErrorMessage
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      example:
        code: notValidClass
        message: Class is not valid!
    Id:
      title: Id
      required:
      - id
      type: object
      properties:
        id:
          type: integer
          format: int32
    MyOntologies:
      title: MyOntologies
      required:
      - count
      - offset
      - totalCount
      type: object
      properties:
        offset:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        ontologyList:
          type: array
          items:
            $ref: '#/components/schemas/MyOntologyItem'
    MyOntologyItem:
      title: MyOntologyItem
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        classCount:
          type: integer
          format: int32
        propertyCount:
          type: integer
          format: int32
        individualCount:
          type: integer
          format: int32
        owner:
          $ref: '#/components/schemas/User'
    Ontologies:
      title: Ontologies
      required:
      - count
      - offset
      - totalCount
      type: object
      properties:
        offset:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        ontologyList:
          type: array
          items:
            $ref: '#/components/schemas/OntologyItem'
    OntologyItem:
      title: OntologyItem
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        classCount:
          type: integer
          format: int32
        propertyCount:
          type: integer
          format: int32
        individualCount:
          type: integer
          format: int32
        owner:
          $ref: '#/components/schemas/User'
    User:
      title: User
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    OntologyDetail:
      title: OntologyDetail
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        classCount:
          type: integer
          format: int32
        propertyCount:
          type: integer
          format: int32
        individualCount:
          type: integer
          format: int32
    ClassTree:
      title: ClassTree
      required:
      - count
      - tree
      type: object
      properties:
        count:
          type: integer
          format: int32
        tree:
          $ref: '#/components/schemas/ClassTreeNode'
    ClassTreeNode:
      title: ClassTree
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/ClassTree'
    ClassNode:
      title: ClassNode
      required:
      - condition
      - createdAt
      - name
      - updatedAt
      type: object
      properties:
        name:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        translationList:
          type: array
          items:
            $ref: '#/components/schemas/Translation'
        externalLink:
          $ref: '#/components/schemas/ExternalLink'
        definitionList:
          type: array
          items:
            $ref: '#/components/schemas/Definition'
        condition:
          $ref: '#/components/schemas/Condition'
    EditedClassNode:
      title: EditedClassNode
      type: object
      properties:
        name:
          type: string
        translationList:
          type: array
          items:
            $ref: '#/components/schemas/Translation'
        externalLink:
          $ref: '#/components/schemas/ExternalLink'
        definitionList:
          type: array
          items:
            $ref: '#/components/schemas/Definition'
        condition:
          $ref: '#/components/schemas/Condition'
    NewClassNode:
      title: NewClassNode
      required:
      - condition
      - name
      type: object
      properties:
        name:
          type: string
        translationList:
          type: array
          items:
            $ref: '#/components/schemas/Translation'
        externalLink:
          $ref: '#/components/schemas/ExternalLink'
        definitionList:
          type: array
          items:
            $ref: '#/components/schemas/Definition'
        condition:
          $ref: '#/components/schemas/Condition'
    CheckedCondition:
      title: WhisperedCondition
      required:
      - condition
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/Condition'
        whisperList:
          type: array
          items:
            $ref: '#/components/schemas/ConditionWhisper'
    Translation:
      title: Translation
      required:
      - description
      - iso
      - name
      type: object
      properties:
        iso:
          type: string
        name:
          type: string
        description:
          type: string
    ExternalLink:
      title: ExternalLink
      required:
      - url
      type: object
      properties:
        url:
          type: string
        title:
          type: string
        iso:
          type: string
    Definition:
      title: Definition
      type: object
    Condition:
      title: Condition
      required:
      - type
      type: object
      properties:
        type:
          type: string
        operator:
          type: string
        set:
          type: array
          items:
            $ref: '#/components/schemas/Condition'
        name:
          type: string
        restriction:
          type: string
        value:
          type: string
    ConditionWhisper:
      title: ConditionWhisper
      required:
      - id
      - type
      - value
      type: object
      properties:
        id:
          type: integer
          format: int32
        type:
          type: string
        value:
          type: string
    PropertyTree:
      title: PropertyTree
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/PropertyTree'
    ObjectPropertyResponse:
      title: ObjectPropertyResponse
      required:
      - createdAt
      - name
      - updatedAt
      type: object
      properties:
        name:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        translationList:
          type: array
          items:
            $ref: '#/components/schemas/Translation'
        externalLink:
          $ref: '#/components/schemas/ExternalLink'
        inverseOf:
          type: array
          items:
            $ref: '#/components/schemas/PropertyTree'
        isFunctional:
          type: boolean
        isInverseFunctional:
          type: boolean
        isTransitive:
          type: boolean
        isSymmetric:
          type: boolean
        isAsymmetric:
          type: boolean
        isReflexive:
          type: boolean
        isIrreflexive:
          type: boolean
        domains:
          type: array
          items:
            $ref: '#/components/schemas/ClassTree'
        ranges:
          type: array
          items:
            $ref: '#/components/schemas/ClassTree'
    ObjectPropertyRequest:
      title: ObjectPropertyRequest
      type: object
      properties:
        name:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        translationList:
          type: array
          items:
            $ref: '#/components/schemas/Translation'
        externalLink:
          $ref: '#/components/schemas/ExternalLink'
        inverseOf:
          type: array
          items:
            $ref: '#/components/schemas/PropertyTree'
        isFunctional:
          type: boolean
        isInverseFunctional:
          type: boolean
        isTransitive:
          type: boolean
        isSymmetric:
          type: boolean
        isAsymmetric:
          type: boolean
        isReflexive:
          type: boolean
        isIrreflexive:
          type: boolean
        domains:
          type: array
          items:
            $ref: '#/components/schemas/ClassTree'
        ranges:
          type: array
          items:
            $ref: '#/components/schemas/ClassTree'
    NewUserRequest:
      title: NewUserRequest
      type: object
      properties:
        firstName:
          type: string
        surname:
          type: string
        login:
          type: string
        password:
          type: string
    UserDetailResponse:
      title: UserDetailResponse
      required:
      - createdAt
      - firstName
      - login
      - surname
      - updatedAt
      type: object
      properties:
        id:
          type: integer
          format: int32
        login:
          type: string
        firstName:
          type: string
        surname:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    UserUpdateRequest:
      title: UserUpdateRequest
      type: object
      properties:
        firstName:
          type: string
        surname:
          type: string
        password:
          type: string
  responses:
    ClientError:
      description: HTTP Client Error 4xx
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: HTTP Server Error 5xx
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Id:
      description: Returned Id
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Id'
  parameters:
    offset:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result set.
      required: false
      style: form
      explode: true
      schema:
        type: integer
    limit:
      name: limit
      in: query
      description: The numbers of items to return.
      required: false
      style: form
      explode: true
      schema:
        type: integer
    orderBy:
      name: orderBy
      in: query
      description: 'Order by name of attribute connected by : with order type (asc/desc).'
      required: false
      style: form
      explode: true
      schema:
        type: string
    orderType:
      name: orderType
      in: query
      description: ASC or DESC. Default is ASC.
      required: false
      style: form
      explode: true
      schema:
        type: string
    ontologyId:
      name: ontologyId
      in: path
      description: Numeric ID of the Ontology.
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    classId:
      name: classId
      in: path
      description: Numeric ID of the Class node.
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    propertyId:
      name: propertyId
      in: path
      description: Numeric ID of the Object Property.
      required: true
      style: simple
      explode: false
      schema:
        type: integer
